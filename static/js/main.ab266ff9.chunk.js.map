{"version":3,"sources":["components/Search.js","components/Result.js","App.js","reportWebVitals.js","index.js"],"names":["Search","props","useState","btn","setBtn","busqueda","setBusqueda","className","onSubmit","e","preventDefault","escrito","type","placeholder","onChange","target","value","src","alt","onClick","cambiar","Result","foto","nombre","genero","especie","App","respuesta","setRespuesta","consulta","setConsulta","offset","setOffset","useEffect","fetch","then","datos","json","resp","results","console","log","txt","nxt","prev","filter","val","name","toLowerCase","includes","map","image","gender","species","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAmCeA,MAhCf,SAAgBC,GACZ,MAAuBC,oBAAS,GAAhC,mBAAQC,EAAR,KAAaC,EAAb,KACA,EAAiCF,mBAAS,IAA1C,mBAAQG,EAAR,KAAkBC,EAAlB,KAgBA,OACI,qCACI,mEACA,sBAAKC,UAAU,aAAf,UACI,uBAAMA,UAAU,OAAOC,SAdrB,SAACC,GACXA,EAAEC,iBACFT,EAAMU,QAAQN,GACdD,GAAO,IAWC,UACI,uBAAOQ,KAAK,OAAOC,YAAY,QAAQN,UAAU,QAAQO,SAnBzD,SAACL,GACbH,EAAYG,EAAEM,OAAOC,UAmBT,uBAAOJ,KAAK,QAAQK,IAAI,WAAWC,IAAI,OAAOX,UAAU,YAEnD,GAAPJ,GAAe,wBAAQI,UAAU,MAAMY,QAZvC,WACVlB,EAAMmB,QAAQ,IAWW,yB,MCXlBC,MAhBf,SAAgBpB,GAEZ,OAEI,qBAAKM,UAAU,UAAf,SACI,sBAAKA,UAAU,eAAf,UACI,qBAAKA,UAAU,eAAeU,IAAKhB,EAAMqB,KAAMJ,IAAI,SACnD,oBAAIX,UAAU,iBAAd,SAAgCN,EAAMsB,SACtC,oBAAGhB,UAAU,gBAAb,qBAAsCN,EAAMuB,UAC5C,oBAAGjB,UAAU,gBAAb,sBAAuCN,EAAMwB,iBCkD9CC,MAxDf,WACE,MAAmCxB,mBAAS,IAA5C,mBAAQyB,EAAR,KAAmBC,EAAnB,KACA,EAAiC1B,mBAAS,IAA1C,mBAAQ2B,EAAR,KAAkBC,EAAlB,KACA,EAA4B5B,mBAAS,GAArC,mBAAO6B,EAAP,KAAeC,EAAf,KA2BA,OATAC,qBAAU,WACRC,MAAM,mDAAD,OAAoDH,IAAUI,MAAK,SAACC,GACvE,OAAOA,EAAMC,UACZF,MAAK,SAACG,GACPV,EAAaU,EAAKC,SAClBC,QAAQC,IAAIH,EAAKC,cAEnB,IAGA,qCACE,iCACE,cAAC,EAAD,CAAQ5B,QA5BI,SAAC+B,GACjBF,QAAQC,IAAI,0BAA0BC,GACtCZ,EAAYY,IA0BoBtB,QAvBhB,SAACuB,GACjBX,GAAU,SAACY,GAAD,OAAQA,EAAKD,KACvBH,QAAQC,IAAI,aAAaV,GACzBG,MAAM,mDAAD,OAAoDH,IAAUI,MAAK,SAACC,GACvE,OAAOA,EAAMC,UACZF,MAAK,SAACG,GACPV,EAAaU,EAAKC,iBAoBhBZ,EAAUkB,QAAO,SAACC,GAChB,MAAgB,KAAbjB,EAEM,2CAEDiB,EAAIC,KAAKC,cAAcC,SAASpB,EAASmB,eAExCF,OAFJ,KAIJI,KAAI,SAACJ,GAEJ,OACE,cAAC,EAAD,CAAQvB,OAASuB,EAAIC,KAAMzB,KAAMwB,EAAIK,MAAO3B,OAAQsB,EAAIM,OAAQ3B,QAASqB,EAAIO,QAASC,GAAIR,EAAIQ,YCzC7FC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ab266ff9.chunk.js","sourcesContent":["import './Search.css';\r\nimport { useState} from 'react';\r\n\r\nfunction Search(props) {\r\n    const [ btn, setBtn] = useState(false);\r\n    const [ busqueda, setBusqueda] = useState('');//lo buscado por el usuario se envia a App\r\n\r\n    const captura = (e) => { //funcion para capturar la busqueda\r\n        setBusqueda(e.target.value);//guardamos lo escrito\r\n    }\r\n\r\n    const  lupa = (e) => { //funcion para enviar el resultado y aparecer el btn next\r\n        e.preventDefault();//prevenir que el form mande al servidor\r\n        props.escrito(busqueda);//enviar busqueda a App\r\n        setBtn(true);//mostrar el boton de siguiente\r\n    }\r\n\r\n    const sigui = () => {\r\n        props.cambiar(1);//aumentar en App.js offset en uno  \r\n    }\r\n\r\n    return (        \r\n        <>\r\n            <h1>Search a Rick and Morty character</h1>\r\n            <div className=\"searchCont\">\r\n                <form className=\"cont\" onSubmit={lupa}>\r\n                    <input type=\"text\" placeholder=\"texto\" className=\"texto\" onChange={captura}/>\r\n                    <input type=\"image\" src=\"lupa.png\" alt=\"lupa\" className=\"lupa\" />\r\n                </form>\r\n                { btn == true && <button className=\"nxt\" onClick={sigui}>NEXT</button> }\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Search;","import './Result.css';\r\n\r\nfunction Result(props) {//acá se recibe lo enviado desde App.js\r\n  \r\n    return (\r\n\r\n        <div className=\"results\">\r\n            <div className=\"results-cont\">\r\n                <img className=\"results-foto\" src={props.foto} alt=\"foto\" />\r\n                <h1 className=\"results-nombre\">{props.nombre}</h1>\r\n                <p className=\"results-info1\">Gender: {props.genero}</p>\r\n                <p className=\"results-info2\">Species: {props.especie}</p>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Result;\r\n\r\n/*\r\nNotas: \r\nAcá llega la información enviada a App.js por Search.js y es entregada mediante los props\r\n*/","import './App.css';\nimport { useState, useEffect } from 'react';\nimport Search from './components/Search';\nimport Result from './components/Result';\n\nfunction App() {\n  const [ respuesta, setRespuesta] = useState([]);//guarda el resultado de la búsqueda a la api\n  const [ consulta, setConsulta] = useState('');//guarda lo consultado por el usuario en Search.js\n  const [offset, setOffset] = useState(1);//contador de páginas\n\n  const capturado = (txt) => {//funcion que recoge lo escrito por el usuario\n    console.log('lo capturado en App es '+txt);\n    setConsulta(txt);\n  }\n\n  const siguiente = (nxt) => {//funcion para traer la siguiente página\n    setOffset((prev)=>prev+nxt)//recibe offset\n    console.log('offset es '+offset);//verificar si incrementa offset\n    fetch(`https://rickandmortyapi.com/api/character/?page=${offset}`).then((datos)=>{\n      return datos.json();\n    }).then((resp)=>{\n      setRespuesta(resp.results);\n      //console.log(resp.results);\n    })\n  }\n\n  useEffect(()=>{\n    fetch(`https://rickandmortyapi.com/api/character/?page=${offset}`).then((datos)=>{\n      return datos.json();\n    }).then((resp)=>{\n      setRespuesta(resp.results);\n      console.log(resp.results);\n    })\n  },[]);\n\n  return (\n    <>\n      <header>\n        <Search escrito={capturado} cambiar={siguiente}/>\n      </header>\n      {\n        respuesta.filter((val)=>{\n          if(consulta === '')\n          {\n            return <p>No results</p>\n          }\n          else if(val.name.toLowerCase().includes(consulta.toLowerCase()))\n          {\n            return val;\n          }\n        }).map((val)=>\n          {\n            return (\n              <Result nombre ={val.name} foto={val.image} genero={val.gender} especie={val.species} id={val.id}/>\n            );\n          })\n\t    }\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}