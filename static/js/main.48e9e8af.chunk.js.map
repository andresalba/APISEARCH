{"version":3,"sources":["components/Search.js","components/Results.js","App.js","reportWebVitals.js","index.js"],"names":["Search","props","useState","busqueda","setBusqueda","respuesta","setRespuesta","useEffect","a","fetch","data","json","datos","console","log","results","className","type","placeholder","onChange","e","target","value","src","alt","onClick","filtro","i","length","name","push","pasarTraer","Results","foto","nombre","genero","especie","App","consultados","setConsultados","traido","undefined","image","gender","species","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yRAwCeA,MArCf,SAAgBC,GAEZ,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAkCF,mBAAS,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAwBA,OAtBAC,oBAAS,sBAAE,8BAAAC,EAAA,sEACYC,MAAM,qDADlB,cACDC,EADC,gBAEaA,EAAKC,OAFlB,OAEDC,EAFC,OAGPC,QAAQC,IAAI,oDAAqDF,GACjEN,EAAaM,EAAMG,SAJZ,2CAKT,IAmBE,sBAAKC,UAAU,OAAf,UACL,uBAAOC,KAAK,OAAOC,YAAY,QAAQC,SAlBtB,SAACC,GACbhB,EAAYgB,EAAEC,OAAOC,OACrBT,QAAQC,IAAI,+BAAgCX,IAgBSa,UAAU,UACpE,uBAAOC,KAAK,QAAQM,IAAI,WAAWC,IAAI,OAAOC,QAdnB,SAACL,GAEvB,IADA,IAAIM,EAAS,GACLC,EAAE,EAAGA,EAAEtB,EAAUuB,OAAQD,IAC1BtB,EAAUsB,GAAGE,OAAS1B,GACrBuB,EAAOI,KAAKzB,EAAUsB,IAG9B1B,EAAM8B,WAAWL,IAOoDV,UAAU,a,MChBxEgB,MAhBf,SAAiB/B,GAEb,OAEI,qBAAKe,UAAU,UAAf,SACI,sBAAKA,UAAU,eAAf,UACI,qBAAKA,UAAU,eAAeO,IAAKtB,EAAMgC,KAAMT,IAAI,SACnD,oBAAIR,UAAU,iBAAd,SAAgCf,EAAMiC,SACtC,oBAAGlB,UAAU,gBAAb,qBAAsCf,EAAMkC,UAC5C,oBAAGnB,UAAU,gBAAb,sBAAuCf,EAAMmC,iB,MCa9CC,MAnBf,WAEE,MAAsCnC,qBAAtC,mBAAOoC,EAAP,KAAoBC,EAApB,KAOA,OACE,sBAAKvB,UAAU,MAAf,UACE,cAAC,EAAD,CAAQe,WAPE,SAACS,GACb3B,QAAQC,IAAI,4CAA6C0B,GACzDD,EAAeC,EAAO,YAMHC,IAAhBH,EAA4B,mBAAGtB,UAAU,UAAb,8BAC3B,cAAC,EAAD,CAASkB,OAASI,EAAYT,KAAMI,KAAMK,EAAYI,MAAOP,OAAQG,EAAYK,OAAQP,QAASE,EAAYM,QAASC,GAAIP,EAAYO,SCNhIC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.48e9e8af.chunk.js","sourcesContent":["import './Search.css';\r\nimport { useEffect, useState } from 'react';\r\n\r\nfunction Search(props) {//hay que ponerle props por que le lleha la función traer desde pasarTraer de App.js\r\n  \r\n    const [busqueda, setBusqueda] = useState('');//variable que guarda lo escrito en el campo de búsqueda\r\n    const [respuesta, setRespuesta] = useState([]);//variable que guarda lo consultado por la base de datos\r\n\r\n    useEffect( async () => { //consulta la base de datos a penas renderiza la página\r\n        const data = await fetch('https://rickandmortyapi.com/api/character/?page=2');\r\n        const datos = await data.json();\r\n        console.log('la consulta a la base de datos desde Search.js es', datos);\r\n        setRespuesta(datos.results);//entrega un objeto y seleccionamos el array results que es interno \r\n    },[]);//por esta línea solo lo hace una vez\r\n\r\n    const captura = (e) => {//esto captura lo escrito en input text y lo mete en busqueda\r\n        setBusqueda(e.target.value);//guardamos en busqueda lo escrito\r\n        console.log(\"el valor capturado input es \", busqueda);\r\n    }\r\n\r\n    const filtrarResultados = (e) => {//esto toma lo capturado en busqueda, y filtra datos y lo manda al parent\r\n        let filtro = [];//variable para guardar lo filtrado\r\n        for(var i=0; i<respuesta.length; i++){//metemos en el array filtro \r\n            if(respuesta[i].name === busqueda){//lo que sea igual a busqueda\r\n                filtro.push(respuesta[i]);\r\n            }\r\n        }\r\n        props.pasarTraer(filtro);//esto pasa el resultado filtrado al parent\r\n      }\r\n\r\n    return (        \r\n\r\n        <div className=\"cont\">\r\n\t\t\t<input type=\"text\" placeholder=\"texto\" onChange={captura} className=\"texto\" />\r\n\t\t\t<input type=\"image\" src=\"lupa.png\" alt=\"lupa\" onClick={filtrarResultados} className=\"lupa\" />\r\n\t\t</div>\r\n\r\n    );\r\n}\r\n\r\nexport default Search;\r\n\r\n/*\r\nNotas: \r\nEsta función envía los resultados de la búsqueda a su parent que es App.js\r\nLa base de datos viene de la página: https://rickandmortyapi.com/documentation\r\n*/","import './Results.css';\r\n\r\nfunction Results(props) {//acá se recibe lo enviado desde App.js\r\n  \r\n    return (\r\n\r\n        <div className=\"results\">\r\n            <div className=\"results-cont\">\r\n                <img className=\"results-foto\" src={props.foto} alt=\"foto\" />\r\n                <h1 className=\"results-nombre\">{props.nombre}</h1>\r\n                <p className=\"results-info1\">Genero: {props.genero}</p>\r\n                <p className=\"results-info2\">Especie: {props.especie}</p>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Results;\r\n\r\n/*\r\nNotas: \r\nAcá llega la información enviada a App.js por Search.js y es entregada mediante los props\r\n*/","import Search from './components/Search'\nimport Results from './components/Results'\nimport './App.css';\nimport { useState } from 'react';\n\nfunction App() {\n\n  const [consultados, setConsultados] = useState();\n\n  const traer = (traido) => {\n    console.log('lo traido de la base de datos a App.js es', traido);\n    setConsultados(traido[0]);\n  }\n\n  return (\n    <div className=\"App\">\n      <Search pasarTraer={traer} />\n      {consultados === undefined ? <p className=\"App-not\">No hay resultado</p> :\n        <Results nombre ={consultados.name} foto={consultados.image} genero={consultados.gender} especie={consultados.species} id={consultados.id}/>\n      }\n      </div>\n  );\n}\n\nexport default App;\n\n/*\nNotas: \nEsta línea <Search pasarTraer={traer} /> trae la información desde el componente Search\nLa funcion traer es llamada mediante pasarTraer en Search.js\nid se consulta pero no se usa en Results.js\n*/","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}